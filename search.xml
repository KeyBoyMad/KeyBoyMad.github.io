<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Binary Tree</title>
      <link href="/2025/03/11/Data-Structure.html"/>
      <url>/2025/03/11/Data-Structure.html</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的概念"><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li>二叉树的唯一条件是每个节点最多只能有两个子节点（可以只有一个）</li><li>没有子节点的节点被称为leaf node</li><li>二叉树的唯一条件是一个节点不能有超过两个的子节点</li><li>一个节点的深度定义为从根节点到该节点的路径长度</li><li>第$i$层的最大节点数为 $2^i$</li><li>二叉树的高度是从根到叶子的最长路径（边的数量），即只有一个节点的树高度为0，空树的高度为-1</li></ul><h2 id="树的类型"><a href="#树的类型" class="headerlink" title="树的类型"></a>树的类型</h2><h3 id="Strict-x2F-Proper-Binary-Tree-严格二叉树"><a href="#Strict-x2F-Proper-Binary-Tree-严格二叉树" class="headerlink" title="Strict&#x2F;Proper Binary Tree 严格二叉树"></a>Strict&#x2F;Proper Binary Tree 严格二叉树</h3><p>each node can have <strong>either 0 or 2</strong> children 每个节点只能有2个或0个子节点</p><h3 id="Complete-Binary-Tree-完全二叉树"><a href="#Complete-Binary-Tree-完全二叉树" class="headerlink" title="Complete Binary Tree 完全二叉树"></a>Complete Binary Tree 完全二叉树</h3><p>all level except possibly the last are completely filled and all nodes are left as possible(<strong>最后一层节点必须向左填充，其他层节点均填满</strong>)<br><img src="/2025/03/11/Data-Structure/completeBinaryTree.png" alt="completeBinaryTree"></p><h3 id="Perfect-Binary-Tree-完美二叉树"><a href="#Perfect-Binary-Tree-完美二叉树" class="headerlink" title="Perfect Binary Tree 完美二叉树"></a>Perfect Binary Tree 完美二叉树</h3><p>all levels will be completely filled<br>所有节点的数量为$2^{h+1}-1 &#x3D; 2^{(numbers Of Levels)}-1$，h为高度，此处为3<br><img src="/2025/03/11/Data-Structure/perfectBinaryTree.png" alt="perfectBinaryTree"><br>n个节点的完美二叉树的高度是多少？<br>$h &#x3D; int(log_2^{n+1}-1)$<br>Height of complete binary tree with n nodes n个节点的完全二叉树的高度为<br>$h &#x3D; log_2^n$<br>很多操作的时间复杂度取决于树的高度，因此我们希望树的高度尽可能低，或者说<strong>保持二叉树尽可能平衡</strong><br>Height of the tree will be  less if the tree will be dense,if the tree will be close to a perfect binary tree or complete binary tree（树如果较为密集的话书的高度就会相对较小，就会更为靠近完美或完全二叉树）<br>对于一个完美二叉树或完全二叉树来说，时间复杂度将会是$O(log^n)$，n为节点数，对于sparse稀疏二二润茶叔，时间复杂度为$O(n)$，类似数组和链表<br><img src="/2025/03/11/Data-Structure/timeCompelexity.png" alt="timeCompelexity"></p><h3 id="Balanced-binary-tree"><a href="#Balanced-binary-tree" class="headerlink" title="Balanced binary tree"></a>Balanced binary tree</h3><p>对于每一个节点，左子树和右子树之间的高度不大于k，大多数时候k&#x3D;1<br>高度差 $diff &#x3D; |hleft - hright|$<br><img src="/2025/03/11/Data-Structure/heightDiff.jpg" alt="heightDiff"><br>这里对于红色节点来说，左子树的高度是1，右子树为空，高度为-1，因此高度差为2<br><img src="/2025/03/11/Data-Structure/image-20250314144337270.png" alt="image-20250314144337270" style="zoom:50%;"><br>二叉树的实现：<br>a)链表：动态的创建节点，通过指针来链接<br>b)数组（用heaps来实现）：常被用做complete binary tree，如下图绿色标号，从上到下从左到右依次编号索引 ，依次填入数组中<br>对于一个在数组中索引为i的节点来说：<br>左子节点的索引为$2i+1$，右子节点的索引为$2i+2$<br><img src="/2025/03/11/Data-Structure/image-20250314200551008.png" alt="image-20250314200551008"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clion&amp;cubemax setting</title>
      <link href="/2024/12/07/clion-cubemax-setting.html"/>
      <url>/2024/12/07/clion-cubemax-setting.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于如何配置Clion和cubemax烧录stm32代码"><a href="#关于如何配置Clion和cubemax烧录stm32代码" class="headerlink" title="关于如何配置Clion和cubemax烧录stm32代码"></a>关于如何配置Clion和cubemax烧录stm32代码</h2><p>Clion需要提前配置好Minw编译器</p><p><strong>软件环境:</strong></p><ul><li>Windows 10</li><li>STM32CubeMX</li><li>Clion-2024</li><li>MinGW</li><li>OpenOCD</li><li>arm-none-eabi-gcc</li></ul><p><strong>硬件环境：</strong></p><ul><li>STM32F103Cx</li><li>DapLink下载器</li></ul><p><strong>arm-none-eabi-gcc</strong> Windows到这里下载：<a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads">https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads</a> ，选择ZIP压缩包形式的</p><p>下载好openOCD和arm-none-eabi-gcc后配置工具链如下，注意debug不要修改，否则无法断点调试</p><p>记得新建环境以防影响日常c++开发</p><p><img src="/2024/12/07/clion-cubemax-setting/image-20241207204842070.png" alt="image-20241207204842070"></p><p>同时设置openocd和cubemax</p><p><img src="/2024/12/07/clion-cubemax-setting/image-20241207205116991.png" alt="image-20241207205116991"></p><p>在完成设置后新建项目生成网上都有相关教程</p><p>这里我提供在cubemax生成项目后回到Clion中不自动识别出现debug的问题的解决方法</p><p><img src="/2024/12/07/clion-cubemax-setting/image-20241207205258359.png" alt="image-20241207205258359"></p><p>在工程项目的根目录添加以下三个文件</p><p>st_link.cfg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># choose st-link/j-link/dap-link etc.</span><br><span class="line"></span><br><span class="line">#ST-Link</span><br><span class="line">source [find interface/stlink.cfg]</span><br><span class="line">transport select hla_swd</span><br><span class="line"></span><br><span class="line">#DAP-Link</span><br><span class="line"></span><br><span class="line">#adapter driver cmsis-dap</span><br><span class="line">#transport select swd</span><br><span class="line"></span><br><span class="line">#这里的stm32f1x.cfg对应的是你的板子的相应芯片型号</span><br><span class="line">source [find target/stm32f1x.cfg]</span><br><span class="line"></span><br><span class="line"># download speed = 10MHz</span><br><span class="line"></span><br><span class="line">adapter speed 10000</span><br></pre></td></tr></table></figure><p>dap_link.cfg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># choose st-link/j-link/dap-link etc.</span><br><span class="line"></span><br><span class="line">#ST-Link</span><br><span class="line">#source [find interface/stlink.cfg]</span><br><span class="line">#transport select hla_swd</span><br><span class="line"></span><br><span class="line">#DAP-Link</span><br><span class="line"></span><br><span class="line">adapter driver cmsis-dap</span><br><span class="line">transport select swd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#这里的stm32f1x.cfg对应的是你的板子的相应芯片型号</span><br><span class="line">source [find target/stm32f1x.cfg]</span><br><span class="line"></span><br><span class="line"># download speed = 10MHz</span><br><span class="line"></span><br><span class="line">adapter speed 10000</span><br></pre></td></tr></table></figure><p>CMakeLists_template.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">#$&#123;templateWarning&#125;</span><br><span class="line">set(CMAKE_SYSTEM_NAME Generic)</span><br><span class="line">set(CMAKE_SYSTEM_VERSION 1)</span><br><span class="line">$&#123;cmakeRequiredVersion&#125;</span><br><span class="line"># specify cross-compilers and tools</span><br><span class="line">set(CMAKE_C_COMPILER arm-none-eabi-gcc)</span><br><span class="line">set(CMAKE_CXX_COMPILER arm-none-eabi-g++)</span><br><span class="line">set(CMAKE_ASM_COMPILER  arm-none-eabi-gcc)</span><br><span class="line">set(CMAKE_AR arm-none-eabi-ar)</span><br><span class="line">set(CMAKE_OBJCOPY arm-none-eabi-objcopy)</span><br><span class="line">set(CMAKE_OBJDUMP arm-none-eabi-objdump)</span><br><span class="line">set(SIZE arm-none-eabi-size)</span><br><span class="line">set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)</span><br><span class="line"></span><br><span class="line"># project settings</span><br><span class="line">project($&#123;projectName&#125; C CXX ASM)</span><br><span class="line">set(CMAKE_CXX_STANDARD 17)</span><br><span class="line">set(CMAKE_C_STANDARD 11)</span><br><span class="line"></span><br><span class="line">#Uncomment for hardware floating point</span><br><span class="line">#add_compile_definitions(ARM_MATH_CM4;ARM_MATH_MATRIX_CHECK;ARM_MATH_ROUNDING)</span><br><span class="line">#add_compile_options(-mfloat-abi=hard -mfpu=fpv4-sp-d16)</span><br><span class="line">#add_link_options(-mfloat-abi=hard -mfpu=fpv4-sp-d16)</span><br><span class="line"></span><br><span class="line">#Uncomment for software floating point</span><br><span class="line">#add_compile_options(-mfloat-abi=soft)</span><br><span class="line"></span><br><span class="line">add_compile_options(-mcpu=$&#123;mcpu&#125; -mthumb -mthumb-interwork)</span><br><span class="line">add_compile_options(-ffunction-sections -fdata-sections -fno-common -fmessage-length=0)</span><br><span class="line"></span><br><span class="line"># uncomment to mitigate c++17 absolute addresses warnings</span><br><span class="line">#set(CMAKE_CXX_FLAGS &quot;$$&#123;CMAKE_CXX_FLAGS&#125; -Wno-register&quot;)</span><br><span class="line"></span><br><span class="line"># Enable assembler files preprocessing</span><br><span class="line">add_compile_options($&lt;$&lt;COMPILE_LANGUAGE:ASM&gt;:-x$&lt;SEMICOLON&gt;assembler-with-cpp&gt;)</span><br><span class="line"></span><br><span class="line">if (&quot;$$&#123;CMAKE_BUILD_TYPE&#125;&quot; STREQUAL &quot;Release&quot;)</span><br><span class="line">    message(STATUS &quot;Maximum optimization for speed&quot;)</span><br><span class="line">    add_compile_options(-Ofast)</span><br><span class="line">elseif (&quot;$$&#123;CMAKE_BUILD_TYPE&#125;&quot; STREQUAL &quot;RelWithDebInfo&quot;)</span><br><span class="line">    message(STATUS &quot;Maximum optimization for speed, debug info included&quot;)</span><br><span class="line">    add_compile_options(-Ofast -g)</span><br><span class="line">elseif (&quot;$$&#123;CMAKE_BUILD_TYPE&#125;&quot; STREQUAL &quot;MinSizeRel&quot;)</span><br><span class="line">    message(STATUS &quot;Maximum optimization for size&quot;)</span><br><span class="line">    add_compile_options(-Os)</span><br><span class="line">else ()</span><br><span class="line">    message(STATUS &quot;Minimal optimization, debug info included&quot;)</span><br><span class="line">    add_compile_options(-Og -g)</span><br><span class="line">endif ()</span><br><span class="line"></span><br><span class="line">function(recursion_include path)</span><br><span class="line">    if(IS_DIRECTORY $&#123;path&#125;)</span><br><span class="line">        message(&quot;[Include] &quot; $&#123;path&#125;)</span><br><span class="line">        include_directories($&#123;path&#125;)</span><br><span class="line">    endif()</span><br><span class="line"></span><br><span class="line">    file(GLOB ALL_SUB RELATIVE $&#123;path&#125; $&#123;path&#125;/*)</span><br><span class="line">    foreach(sub $&#123;ALL_SUB&#125;)</span><br><span class="line">        if(IS_DIRECTORY $&#123;path&#125;/$&#123;sub&#125;)</span><br><span class="line">            recursion_include($&#123;path&#125;/$&#123;sub&#125;)</span><br><span class="line">        endif()</span><br><span class="line">    endforeach()</span><br><span class="line">endfunction()</span><br><span class="line"></span><br><span class="line">include_directories($&#123;includes&#125;)</span><br><span class="line"></span><br><span class="line">add_definitions($&#123;defines&#125;)</span><br><span class="line"></span><br><span class="line"># 自定义的c文件和头文件编译路径添加处</span><br><span class="line">file(GLOB_RECURSE SOURCES $&#123;sources&#125; &quot;BSP/*.*&quot; &quot;APP/*.*&quot; &quot;Components/*.*&quot; &quot;HARDWARE/*.*&quot;)</span><br><span class="line">recursion_include($&#123;CMAKE_SOURCE_DIR&#125;/BSP)</span><br><span class="line">recursion_include($&#123;CMAKE_SOURCE_DIR&#125;/APP)</span><br><span class="line">recursion_include($&#123;CMAKE_SOURCE_DIR&#125;/HARDWARE)</span><br><span class="line">recursion_include($&#123;CMAKE_SOURCE_DIR&#125;/Components)</span><br><span class="line"></span><br><span class="line">set(LINKER_SCRIPT $$&#123;CMAKE_SOURCE_DIR&#125;/$&#123;linkerScript&#125;)</span><br><span class="line"></span><br><span class="line">add_link_options(-Wl,-gc-sections,--print-memory-usage,-Map=$$&#123;PROJECT_BINARY_DIR&#125;/$$&#123;PROJECT_NAME&#125;.map)</span><br><span class="line">add_link_options(-mcpu=$&#123;mcpu&#125; -mthumb -mthumb-interwork)</span><br><span class="line">add_link_options(-T $$&#123;LINKER_SCRIPT&#125;)</span><br><span class="line"></span><br><span class="line">add_executable($$&#123;PROJECT_NAME&#125;.elf $$&#123;SOURCES&#125; $$&#123;LINKER_SCRIPT&#125;)</span><br><span class="line"></span><br><span class="line">set(HEX_FILE $$&#123;PROJECT_BINARY_DIR&#125;/$$&#123;PROJECT_NAME&#125;.hex)</span><br><span class="line">set(BIN_FILE $$&#123;PROJECT_BINARY_DIR&#125;/$$&#123;PROJECT_NAME&#125;.bin)</span><br><span class="line"></span><br><span class="line">add_custom_command(TARGET $$&#123;PROJECT_NAME&#125;.elf POST_BUILD</span><br><span class="line">        COMMAND $$&#123;CMAKE_OBJCOPY&#125; -Oihex $&lt;TARGET_FILE:$$&#123;PROJECT_NAME&#125;.elf&gt; $$&#123;HEX_FILE&#125;</span><br><span class="line">        COMMAND $$&#123;CMAKE_OBJCOPY&#125; -Obinary $&lt;TARGET_FILE:$$&#123;PROJECT_NAME&#125;.elf&gt; $$&#123;BIN_FILE&#125;</span><br><span class="line">        COMMENT &quot;Building $$&#123;HEX_FILE&#125;</span><br><span class="line">Building $$&#123;BIN_FILE&#125;&quot;)</span><br></pre></td></tr></table></figure><p>可以新建这三个文件然后完整复制内容过去再将文件内容移入到项目根目录即可</p><p>具体方法可参考b站up：<a href="https://www.bilibili.com/video/BV1REmwYsEhT/?spm_id_from=333.999.0.0&vd_source=f056e309e8e1fd3c75d25c175bc755e8">优雅的嵌入式开发——用CLion开发stm32之新建工程_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通讯协议学习(UART)</title>
      <link href="/2024/12/05/embedding-1.html"/>
      <url>/2024/12/05/embedding-1.html</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/12/05/embedding-1/image-20241205195439834.png" alt="image-20241205195439834"></p><h2 id="UART通讯协议（Universal-Asynchronous-Receiver-x2F-Transmitter）"><a href="#UART通讯协议（Universal-Asynchronous-Receiver-x2F-Transmitter）" class="headerlink" title="UART通讯协议（Universal Asynchronous Receiver&#x2F;Transmitter）"></a>UART通讯协议（Universal Asynchronous Receiver&#x2F;Transmitter）</h2><p>通用异步接受&#x2F;发送器–UART，是一种串行，异步，全双工通信协议。</p><h3 id="串行（Serial）"><a href="#串行（Serial）" class="headerlink" title="串行（Serial）"></a>串行（Serial）</h3><p><strong>定义</strong>: 数据以<strong>一位接一位</strong>的形式，在单条通道中按顺序传输。</p><p><strong>特点</strong>:</p><p>数据从起点到终点逐位传输，而不是同时传输多位。只需要一条通信线或数据通道（外加控制线）。</p><h3 id="异步（Asynchronous）"><a href="#异步（Asynchronous）" class="headerlink" title="异步（Asynchronous）"></a>异步（Asynchronous）</h3><p><strong>定义</strong>: 数据传输中，发送方和接收方的时钟<strong>无需同步</strong>。</p><p>异步通信以一个字符为传输单位。通信中两个字符之间的时间间隔不固定，但同一字符中两个相邻位之间的时间间隔是固定的。一般来说，两个UART设备之间的通信不需要时钟线。此时，需要在两个UART设备上指定相同的传输速率，以及空闲位、起始位、奇偶校验位和结束位，即遵循相同的协议。</p><p><strong>特点</strong>:</p><p><strong>起始位和停止位</strong>：每组数据通常用起始位和停止位标志数据包的开始与结束。</p><p><strong>无需共享时钟</strong>：双方时钟独立，但需要相同的波特率。</p><h3 id="全双工（Full-Duplex）"><a href="#全双工（Full-Duplex）" class="headerlink" title="全双工（Full-Duplex）"></a>全双工（Full-Duplex）</h3><p><strong>定义</strong>: 数据可以同时<strong>双向传输</strong>，即发送和接收在同一时间内进行。需要两根独立的物理通道，一条用于发送数据，另一条用于接收数据。</p><p><strong>数据传输速率</strong>以波特率表示，即每秒传输的位数。例如，如果数据传输速率为120个字符&#x2F;秒，每个字符为10位（1个起始位、7个数据位、1个校验位、1个停止位），则其传输的波特率为10×120 &#x3D; 1200 个bit&#x2F;s &#x3D; 1200 波特率。</p><h3 id="数据通讯格式"><a href="#数据通讯格式" class="headerlink" title="数据通讯格式"></a>数据通讯格式</h3><p><img src="/2024/12/05/embedding-1/image-20241205201406079.png" alt="image-20241205201406079"></p><h4 id="起始位"><a href="#起始位" class="headerlink" title="起始位"></a>起始位</h4><p>每次通信开始时，发送方发送一个逻辑“0”信号（VOL），表示传输字符的开始。由于总线空闲时为高电平，因此在开始通信时先发送一个与空闲状态明显不同的信号，即VOL。 </p><h4 id="数据位"><a href="#数据位" class="headerlink" title="数据位"></a>数据位</h4><p>起始位之后是我们要传输的数据。数据位可以是5、6、7、8、9位等组成一个字符（通常是8位）。如ASCII码（7位）、扩展BCD码（8位）。首先发送最低位，最后发送最高位。用<strong>低电平</strong> 表示“0”，<strong>高电平</strong>表示“1”，完成数据位的传输。</p><h4 id="奇偶校验位"><a href="#奇偶校验位" class="headerlink" title="奇偶校验位"></a>奇偶校验位</h4><p>奇偶校验基于二进制码流中“1”的个数。发送方根据数据生成一个校验位，接收方通过重新计算来验证数据的完整性。</p><h5 id="1-奇校验（Odd-Parity）"><a href="#1-奇校验（Odd-Parity）" class="headerlink" title="1. 奇校验（Odd Parity）"></a><strong>1. 奇校验（Odd Parity）</strong></h5><ul><li>定义：数据中所有“1”的个数（包括校验位）总是奇数。</li><li>生成方法：<ul><li>如果“1”的个数已经是奇数，校验位为<code>0</code>。</li><li>如果“1”的个数是偶数，校验位为<code>1</code>。</li></ul></li></ul><h5 id="2-偶校验（Even-Parity）"><a href="#2-偶校验（Even-Parity）" class="headerlink" title="2. 偶校验（Even Parity）"></a><strong>2. 偶校验（Even Parity）</strong></h5><ul><li>定义：数据中所有“1”的个数（包括校验位）总是偶数。</li><li>生成方法：<ul><li>如果“1”的个数已经是偶数，校验位为<code>0</code>。</li><li>如果“1”的个数是奇数，校验位为<code>1</code>。</li></ul></li></ul><h4 id="奇偶校验的示例"><a href="#奇偶校验的示例" class="headerlink" title="奇偶校验的示例"></a><strong>奇偶校验的示例</strong></h4><h5 id="数据位：1011001"><a href="#数据位：1011001" class="headerlink" title="数据位：1011001"></a><strong>数据位：1011001</strong></h5><ol><li>奇校验：<ul><li>数据中“1”的个数：4（偶数）。</li><li>校验位为：<code>1</code>。</li><li>最终传输数据：<code>10110011</code>。</li></ul></li><li>偶校验：<ul><li>数据中“1”的个数：4（偶数）。</li><li>校验位为：<code>0</code>。</li><li>最终传输数据：<code>10110010</code>。</li></ul></li></ol><h4 id="校验过程"><a href="#校验过程" class="headerlink" title="校验过程"></a><strong>校验过程</strong></h4><ol><li><strong>发送方</strong>：<ul><li>根据数据计算校验位。</li><li>将数据和校验位一起发送。</li></ul></li><li><strong>接收方</strong>：<ul><li>接收数据后重新计算奇偶性。</li><li>比较计算结果和校验位：<ul><li>若一致：数据可能正确。</li><li>若不一致：检测到错误。</li></ul></li></ul></li></ol><p><strong>优点</strong>：</p><ol><li>实现简单，资源占用低。</li><li>能检测单比特错误。</li></ol><p><strong>缺点</strong>：</p><ol><li><strong>无法纠错</strong>：仅能检测错误，无法判断错误发生在哪一位。</li><li><strong>局限性</strong>：无法检测到偶数个比特翻转错误（例如两个“1”变成“0”或相反）。</li><li><strong>误判概率</strong>：错误未被检测的概率较高。</li></ol><h4 id="停止位"><a href="#停止位" class="headerlink" title="停止位"></a>停止位</h4><p>它是字符数据的结束标记。它可以是 1 位、1.5 位或 2 位 VOH。由于数据在传输线上是定时的，并且每个设备都有自己的时钟，所以在通信时两个设备之间很可能会出现小的不同步。因此停止位不仅表示传输的结束，而且还为计算机提供了纠正时钟的机会。停止位越多，数据传输越稳定，但数据传输速度越慢。</p><h3 id="协议层"><a href="#协议层" class="headerlink" title="协议层"></a>协议层</h3><p>在协议层中，规定了数据包的内容，由起始位、主要数据、校验位和停止位组成。双方的数据包格式必须约定一致，才能正常发送和接收数据。</p><p><img src="/2024/12/05/embedding-1/image-20241205204131725.png" alt="image-20241205204131725"></p><table><thead><tr><th><strong>字段</strong></th><th><strong>长度</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>STX</strong></td><td>1 字节</td><td>消息开始标识符（固定为 0xFE）。</td></tr><tr><td><strong>Length</strong></td><td>1 字节</td><td>消息负载部分的长度（不包括头部和校验和）。</td></tr><tr><td><strong>Sequence</strong></td><td>1 字节</td><td>序列号，用于跟踪消息的顺序。</td></tr><tr><td><strong>System ID</strong></td><td>1 字节</td><td>标识系统的 ID，通常是无人机或地面站。</td></tr><tr><td><strong>Component ID</strong></td><td>1 字节</td><td>标识系统中不同组件的 ID，如飞行控制器、GPS 模块、传感器等。</td></tr><tr><td><strong>Message ID</strong></td><td>1 字节</td><td>消息类型标识符，用于标识不同类型的消息（如飞行状态、遥控指令等）。</td></tr><tr><td><strong>Payload</strong></td><td>可变长度</td><td>数据负载部分，包含具体的传输数据。</td></tr><tr><td><strong>Checksum</strong></td><td>2 字节</td><td>校验和，用于验证数据传输的完整性。</td></tr></tbody></table><h3 id="错误状态"><a href="#错误状态" class="headerlink" title="错误状态"></a>错误状态</h3><h4 id="1-帧错误（Frame-Error）"><a href="#1-帧错误（Frame-Error）" class="headerlink" title="1. 帧错误（Frame Error）"></a>1. <strong>帧错误（Frame Error）</strong></h4><p><strong>原因</strong>：帧错误通常发生在接收到的数据与预期的帧结构不匹配时。例如，如果数据位的数量不对或缺少停止位，就会发生帧错误。</p><p>可能原因：数据位长度设置不正确。停止位缺失或错误。接收方的接收时钟和发送方的发送时钟不同步。</p><p>解决方法：确保发送和接收双方的帧格式一致（如数据位、停止位和奇偶校验位等）。检查串口波特率是否匹配。</p><h4 id="2-溢出错误（Overrun-Error）"><a href="#2-溢出错误（Overrun-Error）" class="headerlink" title="2. 溢出错误（Overrun Error）"></a>2. <strong>溢出错误（Overrun Error）</strong></h4><p><strong>原因</strong>：溢出错误发生在接收缓冲区满时，接收到的新数据无法存入缓冲区。</p><p>可能原因：接收方处理速度太慢，数据到达的速率超过了缓冲区的处理能力。串口配置的波特率过高，导致接收方无法及时读取数据。</p><p>解决方法：提高接收方的处理速度，减少数据的读取时间。降低波特率，以确保数据接收的稳定性。使用更大的接收缓冲区，减少丢包的风险。</p><h4 id="3-奇偶校验错误（Parity-Error）"><a href="#3-奇偶校验错误（Parity-Error）" class="headerlink" title="3. 奇偶校验错误（Parity Error）"></a>3. <strong>奇偶校验错误（Parity Error）</strong></h4><p><strong>原因</strong>：奇偶校验错误发生在接收到的数据与设定的奇偶校验不一致时。</p><p>可能原因：数据传输过程中发生了位翻转，导致校验和错误。发送和接收双方的校验位配置不同（例如一个使用偶校验而另一个使用奇校验）。</p><p>解决方法：确保发送方和接收方使用相同的奇偶校验设置（偶校验、奇校验或无校验）。检查通信线路和电气连接，确保没有噪声干扰。</p><h4 id="4-接收缓冲区溢出（Receive-Buffer-Overflow）"><a href="#4-接收缓冲区溢出（Receive-Buffer-Overflow）" class="headerlink" title="4. 接收缓冲区溢出（Receive Buffer Overflow）"></a>4. <strong>接收缓冲区溢出（Receive Buffer Overflow）</strong></h4><p><strong>原因</strong>：当接收数据的速率高于处理速率时，接收缓冲区可能会溢出，导致数据丢失。</p><p>可能原因：数据接收速率过快，接收端无法及时处理数据。系统负载过高，无法及时读取接收到的数据。</p><p>解决方法：降低串口的波特率。优化接收端的处理算法，确保数据尽可能快地被处理。使用较大的缓冲区以容纳更多数据。</p><h4 id="5-发送缓冲区溢出（Transmit-Buffer-Overflow）"><a href="#5-发送缓冲区溢出（Transmit-Buffer-Overflow）" class="headerlink" title="5. 发送缓冲区溢出（Transmit Buffer Overflow）"></a>5. <strong>发送缓冲区溢出（Transmit Buffer Overflow）</strong></h4><p>发送缓冲区溢出发生在发送数据的速率超过了 UART 控制器能够处理的速率。</p><p>可能原因：数据发送速率过快，导致缓冲区被填满。发送方无法及时将数据从缓冲区传输到 UART。</p><p>解决方法：降低波特率或发送速率。增加硬件或软件缓冲区的大小，以适应高数据传输量。在发送端加入流控制（如 XON&#x2F;XOFF 或 RTS&#x2F;CTS）来调节数据流量。</p><h4 id="6-线路噪声（Noise-Error）"><a href="#6-线路噪声（Noise-Error）" class="headerlink" title="6. 线路噪声（Noise Error）"></a>6. <strong>线路噪声（Noise Error）</strong></h4><p>线路上的电气噪声可能会干扰数据传输，导致数据错误。</p><p>可能原因：串口线路中存在高频噪声源。电源不稳定或电磁干扰（EMI）影响了串行通信。</p><p>解决方法：使用更高质量的屏蔽线缆来减少外部干扰。在设备中加入滤波器以减少噪声。采取差分信号传输（如 RS-485）来减少噪声的影响。</p><h4 id="7-数据丢失（Data-Loss）"><a href="#7-数据丢失（Data-Loss）" class="headerlink" title="7. 数据丢失（Data Loss）"></a>7. <strong>数据丢失（Data Loss）</strong></h4><p>数据丢失可能发生在接收方无法及时处理所有传入数据时，导致缓冲区中的一些数据丢失。</p><p>可能原因：接收方的处理能力不足，无法及时读取和处理数据。高速数据传输时缓冲区的溢出。</p><p>解决方法：增加接收方处理能力，优化数据处理流程。采用流控制协议（如 XON&#x2F;XOFF 或 RTS&#x2F;CTS）来控制数据流量。</p><h3 id="UART、I2c-和-SPI"><a href="#UART、I2c-和-SPI" class="headerlink" title="UART、I2c 和 SPI"></a>UART、I2c 和 SPI</h3><table><thead><tr><th><strong>协议</strong></th><th>复杂度</th><th>传输速度</th><th>设备数量</th><th>线数</th><th>复式</th><th>主从数量</th></tr></thead><tbody><tr><td><strong>UART</strong></td><td>简单的</td><td>最慢</td><td>最多 2 台设备</td><td>1</td><td>全双工</td><td>单对单</td></tr><tr><td><strong>I2C</strong></td><td>轻松链接多个设备</td><td>比 UART 更快</td><td>最多 127 个，但变得复杂</td><td>2</td><td>半双工</td><td>多个从机和主机</td></tr><tr><td><strong>SPI</strong></td><td>随着设备的增加而复杂</td><td>最快的</td><td>很多，但变得复杂</td><td>4</td><td>全双工</td><td>1个主站，多个从站</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I&#39;m BACK!</title>
      <link href="/2024/12/05/2024-12-5.html"/>
      <url>/2024/12/05/2024-12-5.html</url>
      
        <content type="html"><![CDATA[<h2 id="回来了"><a href="#回来了" class="headerlink" title="回来了"></a>回来了</h2><p>时隔接近一年，因为最近在准备实习，突然想到我也有自己的技术博客，于是又重新学习了一番，准备持续的用博客当作学习知识或者八股一类后的输出了</p><p>希望来年能找到合适的实习，秋招能找到合适的工作吧，在如此严峻的形式下，个人能做的也只有带着迷茫的向前努力啦。</p><p>加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近几天以来的成果和之后的目标</title>
      <link href="/2023/01/05/daily.html"/>
      <url>/2023/01/05/daily.html</url>
      
        <content type="html"><![CDATA[<h2 id="博客的启蒙，学习和实现"><a href="#博客的启蒙，学习和实现" class="headerlink" title="博客的启蒙，学习和实现"></a>博客的启蒙，学习和实现</h2><p><img src="/2023/01/05/daily/createblog.jpg" alt="alt text"><br>首次从头脑中产生出<strong>我要做一个属于自己的博客</strong>这个想法应当实在半年多以前，我在网上搜寻专业课相关的课程和资料时偶然发现了同校学长的博客，首当其冲让我感到好奇和觉得炫酷的时极其个性化的网页样式和背景，以及详略得当和逻辑条理清晰的文章内容分类，依稀记得学长有在博客中说过想要用自己的博客来记录自己以往的学习过的课程和知识，将自己学习到的知识进行输出，以及记录自己的生活（遗憾的是发现学长的博客因为什么原因貌似已经挂掉了🤣)当时的我也深以为然，但限于时间和精力有限一直未能实现这个小梦想，直到考研结束后才拥有了闲暇来完成这件事情。因此在这里首先要感谢方昊宇学长对我的启蒙，以及随后的多次的邮件交流对我专业学习的指导~</p><p>其次，在这里要着重感谢几位大佬的文章与教程</p><p>博客地址如下：</p><blockquote><p>Fomalhaut🥝: <a href="https://www.fomal.cc/">https://www.fomal.cc/</a><br>tzy: <a href="https://tzy1997.com/">https://tzy1997.com/</a></p></blockquote><p>猕猴桃和tzy大佬的<strong>基于hexo搭建博客</strong>从无到有的教会了我相关的知识，所有的相关的教程和资源都可以在他们的博客中搜索到，以及hexo的官方文档中也有详尽的说明来指导和学习，还要感谢群里的无数博客爱好者们为我的博客搭建和学习提供了许多帮助（帮忙修bug🤣🤣），在我学习有成之后也会尽力去帮助他人</p><h2 id="文献阅读和管理，Zotero-amp-Obsidian"><a href="#文献阅读和管理，Zotero-amp-Obsidian" class="headerlink" title="文献阅读和管理，Zotero &amp; Obsidian"></a>文献阅读和管理，Zotero &amp; Obsidian</h2><p>前两天导师发给我两篇英文文献，随后又告诉我到假期结束前需要完成毕业设计的文献综述和开题报告（竟然要看25篇paper），在此之前我就有过想要学习如何系统的阅读文献管理文献以及做好文献笔记（虽然这方面目前仍是个半吊子），因此下载了Zotero这款文献管理软件，随后又又又在b站上发现了Obsidian同样也是用markdown语言书写笔记的，并且和Zotero都支持插件，因此可以形成两端同步从而达到阅读文献+管理文献+文献笔记及标注，也算是提前为之后的科研工作做好铺垫</p><h2 id="短期内需要做的事情"><a href="#短期内需要做的事情" class="headerlink" title="短期内需要做的事情"></a>短期内需要做的事情</h2><ul><li>首要的当然是每天保持一定文献阅读量，毕竟还是对自己的毕设选题很感兴趣</li><li>其次就是也得稍微准备一下复试的相关知识储备，虽然还对初试的分数没底但应该是没有问题的把。。。。。。</li><li>最后就是持续优化bolg和学习markdown语法进行书写了，笔记博客更新以及文献笔记都用的上，最重要的还是自己喜欢在这些东西上花时间，也算是自己的新爱好了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
